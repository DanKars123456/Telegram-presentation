import os
import logging
import telebot
from telebot import types
from pptx import Presentation
from pptx.util import Inches
from openai import OpenAI
from openai.types.chat import ChatCompletionMessage
from openai.types.chat import ChatCompletion
from openai import APIConnectionError, RateLimitError, BadRequestError

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω Telegram
TOKEN = os.getenv("8237141546:AAH4Duh0H3B7kjGn5hfu5Z4DbiaxjBY383c") or "your_telegram_token_here"
bot = telebot.TeleBot(TOKEN)

# –¢–æ–∫–µ–Ω OpenAI
client = OpenAI(api_key=os.getenv("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") or "your_openai_api_key_here")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

# –®–∞–≥–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
steps = ["name", "topic", "slides", "design", "font", "style", "language"]

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.chat.id
    user_state[user_id] = {"step": "name"}
    bot.send_message(user_id, "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç
@bot.message_handler(func=lambda msg: True)
def handle_message(message):
    user_id = message.chat.id
    text = message.text
    state = user_state.get(user_id, {"step": "name"})

    step = state["step"]

    if step == "name":
        state["name"] = text
        state["step"] = "topic"
        bot.send_message(user_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text}! –ù–∞–ø–∏—à–∏ —Ç–µ–º—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:")
    elif step == "topic":
        state["topic"] = text
        state["step"] = "slides"
        bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ —Å–ª–∞–π–¥–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å?")
    elif step == "slides":
        if not text.isdigit():
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
        state["slides"] = int(text)
        state["step"] = "design"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–°–≤–µ—Ç–ª—ã–π –º–∏–Ω–∏–º–∞–ª–∏–∑–º", "–¢–µ–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:", reply_markup=markup)
    elif step == "design":
        state["design"] = text
        state["step"] = "font"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("Arial", "Times New Roman")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —à—Ä–∏—Ñ—Ç:", reply_markup=markup)
    elif step == "font":
        state["font"] = text
        state["step"] = "style"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", "–¢–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–ª–∞–π–¥–æ–≤:", reply_markup=markup)
    elif step == "style":
        state["style"] = text
        state["step"] = "language"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–†—É—Å—Å–∫–∏–π", "English", "Polski")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:", reply_markup=markup)
    elif step == "language":
        state["language"] = text
        bot.send_message(user_id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é...")
        try:
            pptx_file = generate_presentation(state)
            with open(pptx_file, "rb") as f:
                bot.send_document(user_id, f)
            os.remove(pptx_file)
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
        finally:
            user_state.pop(user_id, None)
    user_state[user_id] = state


def generate_presentation(state):
    topic = state["topic"]
    slides = state["slides"]
    language = state["language"]

    prompt = f"Create a presentation on the topic '{topic}' in {language}. Include {slides} slides. Use bullet points."

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "user",
                "content": prompt
            }],
            temperature=0.7,
        )
        content = response.choices[0].message.content
    except (APIConnectionError, RateLimitError, BadRequestError) as e:
        raise RuntimeError(f"OpenAI error: {e}")

    prs = Presentation()
    for i, slide_text in enumerate(content.split("\n\n")):
        slide = prs.slides.add_slide(prs.slide_layouts[1])
        title, *points = slide_text.split("\n")
        slide.shapes.title.text = title.strip()
        body = slide.shapes.placeholders[1]
        tf = body.text_frame
        for point in points:
            tf.add_paragraph().text = point.strip("‚Ä¢ ").strip()

    filename = f"presentation_{state['name']}.pptx"
    prs.save(filename)
    return filename


if __name__ == "__main__":
    try:
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        bot.infinity_polling()
    except Exception as e:
        print(f"‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {e}")
